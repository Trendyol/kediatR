{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kediatR","text":"<p>Mediator implementation for Kotlin.</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>+ $version = 3.0.0\n</code></pre> Gradle  To use the SNAPSHOT version you need to add repository to your dependency management:  <pre><code> maven {\nurl = uri(\"https://oss.sonatype.org/content/repositories/snapshots\")\n}\n</code></pre>  kediatR-core  <pre><code> implementation(\"com.trendyol:kediatr-core:$version\")\n</code></pre>  kediatR-spring-starter  <pre><code> implementation(\"com.trendyol:kediatr-spring-starter:$version\")\n</code></pre>  kediatR-koin-starter  <pre><code> implementation(\"com.trendyol:kediatr-koin-starter:$version\")\n</code></pre>  kediatR-quarkus-starter  <pre><code> implementation(\"com.trendyol:kediatr-quarkus-starter:$version\")\n</code></pre> Maven  To use the SNAPSHOT version you need to add repository to your dependency management:  <pre><code>&lt;profiles&gt;\n&lt;profile&gt;\n&lt;id&gt;allow-snapshots&lt;/id&gt;\n&lt;activation&gt;&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;&lt;/activation&gt;\n&lt;repositories&gt;\n&lt;repository&gt;\n&lt;id&gt;snapshots-repo&lt;/id&gt;\n&lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;\n&lt;releases&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/releases&gt;\n&lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;\n&lt;/repository&gt;\n&lt;/repositories&gt;\n&lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre>  kediatR-core  <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.trendyol&lt;/groupId&gt;\n&lt;artifactId&gt;kediatr-core&lt;/artifactId&gt;\n&lt;version&gt;$version&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>  kediatR-spring-starter  <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.trendyol&lt;/groupId&gt;\n&lt;artifactId&gt;kediatr-spring-starter&lt;/artifactId&gt;\n&lt;version&gt;$version&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>  kediatR-koin-starter  <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.trendyol&lt;/groupId&gt;\n&lt;artifactId&gt;kediatr-koin-starter&lt;/artifactId&gt;\n&lt;version&gt;$version&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>  kediatR-quarkus-starter  <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.trendyol&lt;/groupId&gt;\n&lt;artifactId&gt;kediatr-quarkus-starter&lt;/artifactId&gt;\n&lt;version&gt;$version&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"#command-dispatching","title":"Command dispatching","text":"<pre><code>class ManualDependencyProvider(\nprivate val handlerMap: HashMap&lt;Class&lt;*&gt;, Any&gt;\n) : DependencyProvider {\noverride fun &lt;T&gt; getSingleInstanceOf(clazz: Class&lt;T&gt;): T {\nreturn handlerMap[clazz] as T\n}\noverride fun &lt;T&gt; getSubTypesOf(clazz: Class&lt;T&gt;): Collection&lt;Class&lt;T&gt;&gt; {\nreturn handlerMap\n.filter { it.key.interfaces.contains(clazz) }\n.map { it.key as Class&lt;T&gt; }\n}\n}\nfun main() {\nval handler = HelloCommandHandler()\nval handlers: HashMap&lt;Class&lt;*&gt;, Any&gt; = hashMapOf(Pair(HelloCommandHandler::class.java, handler))\nval provider = ManualDependencyProvider(handlers)\nval mediator: Mediator = MediatorBuilder(provider).build()\nmediator.send(HelloCommand(\"hello\"))\n}\nclass HelloCommand(val message: String) : Command\nclass HelloCommandHandler : CommandHandler&lt;HelloCommand&gt; {\noverride suspend fun handle(command: HelloCommand) {\nprintln(command.message)\n}\n}\n</code></pre>"},{"location":"#query-dispatching","title":"Query dispatching","text":"<pre><code>fun main() {\nval handler = GetSomeDataQueryHandler()\nval handlers: HashMap&lt;Class&lt;*&gt;, Any&gt; = hashMapOf(Pair(GetSomeDataQuery::class.java, handler))\nval provider = ManualDependencyProvider(handlers)\nval mediator: Mediator = MediatorBuilder(provider).build()\nval result: String = mediator.send(GetSomeDataQuery(1))\nprintln(result)\n}\nclass GetSomeDataQuery(val id: Int) : Query&lt;String&gt;\nclass GetSomeDataQueryHandler : QueryHandler&lt;GetSomeDataQuery, String&gt; {\noverride suspend fun handle(query: GetSomeDataQuery): String {\n// you can use properties in the query object to retrieve data from somewhere\n// val result = getDataFromSomewhere(query.id)\n// return result\nreturn \"hello\"\n}\n}\n</code></pre>"},{"location":"#pipeline-behavior","title":"Pipeline Behavior","text":"<pre><code>class CommandProcessingPipeline : PipelineBehavior {\noverride suspend fun &lt;TRequest, TResponse&gt; handle(\nrequest: TRequest,\nnext: RequestHandlerDelegate&lt;TRequest, TResponse&gt;\n): TResponse {\nprintln(\"Starting process.\")\nval result = next(request)\nprintln(\"Ending process.\")\nreturn result\n}\n}\n</code></pre>"},{"location":"#springboot","title":"SpringBoot","text":"<ul> <li>Add kediatr-spring dependency to your maven or gradle dependencies</li> </ul> <pre><code>@Service\nclass UserService(private val mediator: Mediator) {\nsuspend fun findUser(id: Long) {\nreturn mediator.send(GetUserByIdQuery(id))\n}\n}\nclass GetUserByIdQuery(private val id: Long) : Query&lt;UserDto&gt;\n@Component\nclass GetUserByIdQueryHandler(private val userRepository: UserRepository): QueryHandler&lt;GetUserByIdQuery, UserDto&gt; {\noverride suspend fun handle(query: GetUserByIdQuery): UserDto {\nval user = userRepository.findById(query.id)\n// do some operation on user\nreturn UserDto(user.id, user.name, user.surname)\n}\n}\n</code></pre>"},{"location":"#koin","title":"Koin","text":"<p>Simply inject KediatR as a singleton dependency with any module and inject handler instances. KediatRKoin.getMediator() must be in the same module with at least one Handler to get correct package name for reflection. Please note that this is an experimental release and reflection strategy with koin is a little wonky. Please open a pull request if you think there is a better implementation.</p> <pre><code>val kediatRModule = module {\nsingle { KediatRKoin.getMediator() }\nsingle { GetUserByIdQueryHandler(get()) }\n}\nclass UserService(private val mediator: Mediator) {\nfun findUser(id: Long) {\nreturn mediator.send(GetUserByIdQuery(id))\n}\n}\nclass GetUserByIdQuery(private val id: Long) : Query&lt;UserDto&gt;\nclass GetUserByIdQueryHandler(private val userRepository: UserRepository) : QueryHandler&lt;GetUserByIdQuery, UserDto&gt; {\nfun handle(query: GetUserByIdQuery): UserDto {\nval user = userRepository.findById(query.id)\n// do some operation on user\nreturn UserDto(user.id, user.name, user.surname)\n}\n}\n</code></pre>"},{"location":"#quarkus","title":"Quarkus","text":"<ul> <li>Add kediatr-quarkus-starter dependency to your dependencies</li> <li>Quarkus does not index 3rd party libraries unless you explicitly indicate. Add this configuration to **   application.properties** file.</li> </ul> <pre><code>  quarkus:\nindex-dependency:\nkediatr:\ngroup-id: com.trendyol\nartifact-id: kediatr-quarkus-starter\n```\n* Add @Startup annotation for every handler so that KediatR can prepare queries and commands on beginning of the\napplication.\n```kotlin\nclass UserService(private val mediator: mediator) {\nfun findUser(id: Long) {\nreturn mediator.send(GetUserByIdQuery(id))\n}\n}\nclass GetUserByIdQuery(private val id: Long) : Query&lt;UserDto&gt;\n@ApplicationScoped\n@Startup\nclass GetUserByIdQueryHandler(private val userRepository: UserRepository) : QueryHandler&lt;GetUserByIdQuery, UserDto&gt; {\noverride suspend fun handle(query: GetUserByIdQuery): UserDto {\nval user = userRepository.findById(query.id)\n// do some operation on user\nreturn UserDto(user.id, user.name, user.surname)\n}\n}\n</code></pre>"},{"location":"#review-our-intellij-plugin","title":"Review Our IntelliJ Plugin","text":""},{"location":"#warning-this-plugin-does-not-support-v20-yet","title":"Warning: This plugin does not support v2.0+ yet.","text":"<p>https://plugins.jetbrains.com/plugin/16017-kediatr-helper</p> <p></p> <p></p> <p>Source: https://github.com/bilal-kilic/kediatr-helper</p>"}]}